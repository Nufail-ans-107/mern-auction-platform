name: Deploy to AWS EC2 using Terraform

on:
  push:
    branches:
      - main

jobs:
  security-and-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # ðŸ”¹ Trivy Scan (Filesystem)
      - name: Run Trivy FileSystem Scan
        uses: aquasecurity/trivy-action@0.12.0
        with:
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          path: '.'

      # ðŸ”¹ Trivy Docker Image Scan (optional if you build Docker images)
      - name: Build Docker image
        run: docker build -t mern-auction-app .
      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: 'mern-auction-app:latest'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: 'table'
          exit-code: '0'

      # ðŸ”¹ SonarQube Scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=mern-auction-platform
            -Dsonar.organization=nufail
            -Dsonar.sources=.
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [security-and-quality]   # ensure scans run first
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: |
          terraform plan \
            -var "ami_id=${{ secrets.AMI_ID }}" \
            -var "instance_type=${{ secrets.INSTANCE_TYPE }}" \
            -var "region=${{ secrets.AWS_REGION }}" \
            -var "key_name=${{ secrets.EC2_KEY_NAME }}" \
            -var "my_ip=${{ secrets.MY_IP }}"
        working-directory: terraform

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var "ami_id=${{ secrets.AMI_ID }}" \
            -var "instance_type=${{ secrets.INSTANCE_TYPE }}" \
            -var "region=${{ secrets.AWS_REGION }}" \
            -var "key_name=${{ secrets.EC2_KEY_NAME }}" \
            -var "my_ip=${{ secrets.MY_IP }}"
        working-directory: terraform

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
